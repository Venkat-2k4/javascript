framework vs library

framework :
collection of libraries 
ex tailwind ,bootstrap , angular

library:
collections of methods or functions
ex:
 react.js , JQuery ,node.js,popper.js 
 

 // REACT 
  its a library
  its used to develop single page application 
  its a component based application
  components are reusable
  react is declerative
  NOTE:*********
    react will components on the web page without page reloading 


//
diffing algorithm:
one to one mapping between real dom and virtual dom is perfomed by diffing


react uses  MVC architecture:

react dependencies 
    -->react
        ==>createElement,all the hooks
    -->react-dom
        ==>used to create virtual dom
    -->react-script
        ==>used to run, debug , test , eject react-app 

//history of react 
introduced in  2013 by  facebook (meta) , jordan walke 
    AJAX is the main core and source for creating react 

//
REACT 19 
how to create a react-application 
----------------------------------
1)node.js 
2)CDN way 
------------------------------------
    1)npm- node package manager
        -used to install ,update ,delete packages in js.
        -packages will be globally

        npm install -g create-react-app
        npm create vite@latest 
    2)npx-node package executer
        -used to execute packages without installing it
        -no need of globally while installing packages

react-folder-structure
--------------------------------------------------

node modules folder :-
    --> all the packages  and the third party libraries are stored here

src folder :-
    -->its the main folder
    -->used for creating components

index.html:-
    -->it is a root file

eslint :-
    --.used for debugging and finding errors 

package.json:-
    keeps track of dependencies


**********babel:-
    will convert advanced concepts of js to old version 
    its a transpiler 

---------------------------------------------------------------------------------------------------------


components 

-------------------------------------------
-->components are basic building blocks in react 
-->components are re-usable .

two types 
---------
    --> class based 
    --> function based / presentational component / dumb component

1> class based component 
    -->IT IS ES 6 IN js
    --> it uses react life cycle 
    --> its a statefull component
    -->uses render() method
        --> render() components on the web page 
    --> it uses the constructor to store data and it uses extend keyword
     
    class className extends React.Component {
        render(){
            <h1> I am the class based component </h1>        
        }
    }
    export default demo;

2> function based component
    -->it is js pure function 
    -->it doesnt use any react life cycle
    -->it doesnt use any render method 
    -->it is state less 
        after react 16.8 functional components became statefull because of hooks

        
        import React from "react "
        function demo() {
        return(
            <h1> I am the class based component </h1>   
        )
        }       

        export default demo



import React from "react "
let demo = ()=>{
    return(
        <h1> I am the class based component </h1>   
    )
}

creating elements in js
---------------------------------
let h1 = document.createElement("h1")
h1.innerText  = "Hello";

React 
---------------------------------
React.createElement("tag-name" ,"null or {id:"demo}","content")

React.createELement("div ",{id:"demo"},React.createElement("span", "null","Hello")  )


JSX ----------------

-->it is used to create html in React 
-->it is neither string nor html

rules:-
    1)all the should be enclosed 
        ex:<h1 />
    2)if theres more than one element then it should be wrapped inside the parent element or <></>
        ex:
        <>
            <h1> hello </h1>
            <h1>world</h1> 
        </>
    3)use {} for writing expression and javaScript 
        <p> {data}</p>


props in react -------------------------
    -->props stand for properties
    --> used to send data from one component to another component
    --> props are undirectional
    -->props are immutable(read only)
    
